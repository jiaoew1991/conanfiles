diff --git a/CMake/folly-deps.cmake b/CMake/folly-deps.cmake
index 048e1cdf6..f6fac30d3 100644
--- a/CMake/folly-deps.cmake
+++ b/CMake/folly-deps.cmake
@@ -19,7 +19,7 @@ include(CheckFunctionExists)
 if(MSVC)
   set(Boost_USE_STATIC_LIBS ON) #Force static lib in msvc
 endif(MSVC)
-find_package(Boost 1.51.0 MODULE
+find_package(Boost  
   COMPONENTS
     context
     filesystem
@@ -32,31 +32,31 @@ find_package(Boost 1.51.0 MODULE
 list(APPEND FOLLY_LINK_LIBRARIES ${Boost_LIBRARIES})
 list(APPEND FOLLY_INCLUDE_DIRECTORIES ${Boost_INCLUDE_DIRS})
 
-find_package(DoubleConversion MODULE REQUIRED)
-list(APPEND FOLLY_LINK_LIBRARIES ${DOUBLE_CONVERSION_LIBRARY})
-list(APPEND FOLLY_INCLUDE_DIRECTORIES ${DOUBLE_CONVERSION_INCLUDE_DIR})
+find_package(double-conversion  REQUIRED)
+list(APPEND FOLLY_LINK_LIBRARIES ${double-conversion_LIBRARY})
+list(APPEND FOLLY_INCLUDE_DIRECTORIES ${double-conversion_INCLUDE_DIR})
 
-find_package(Gflags MODULE)
-set(FOLLY_HAVE_LIBGFLAGS ${LIBGFLAGS_FOUND})
-list(APPEND FOLLY_LINK_LIBRARIES ${LIBGFLAGS_LIBRARY})
-list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBGFLAGS_INCLUDE_DIR})
-list(APPEND CMAKE_REQUIRED_LIBRARIES ${LIBGFLAGS_LIBRARY})
-list(APPEND CMAKE_REQUIRED_INCLUDES ${LIBGFLAGS_INCLUDE_DIR})
+find_package(gflags  REQUIRED)
+set(FOLLY_HAVE_LIBGFLAGS ${gflags_FOUND})
+list(APPEND FOLLY_LINK_LIBRARIES ${gflags_LIBRARIES})
+list(APPEND FOLLY_INCLUDE_DIRECTORIES ${gflags_INCLUDE_DIR})
+list(APPEND CMAKE_REQUIRED_LIBRARIES ${gflags_LIBRARIES})
+list(APPEND CMAKE_REQUIRED_INCLUDES ${gflags_INCLUDE_DIR})
 
-find_package(Glog MODULE)
-set(FOLLY_HAVE_LIBGLOG ${GLOG_FOUND})
-list(APPEND FOLLY_LINK_LIBRARIES ${GLOG_LIBRARY})
-list(APPEND FOLLY_INCLUDE_DIRECTORIES ${GLOG_INCLUDE_DIR})
+find_package(glog  REQUIRED)
+set(FOLLY_HAVE_LIBGLOG ${glog_FOUND})
+list(APPEND FOLLY_LINK_LIBRARIES ${glog_LIBRARY})
+list(APPEND FOLLY_INCLUDE_DIRECTORIES ${glog_INCLUDE_DIR})
 
-find_package(LibEvent MODULE REQUIRED)
-list(APPEND FOLLY_LINK_LIBRARIES ${LIBEVENT_LIB})
-list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBEVENT_INCLUDE_DIR})
+find_package(Libevent  REQUIRED)
+list(APPEND FOLLY_LINK_LIBRARIES ${Libevent_LIB})
+list(APPEND FOLLY_INCLUDE_DIRECTORIES ${Libevent_INCLUDE_DIR})
 
 find_package(OpenSSL MODULE REQUIRED)
-list(APPEND FOLLY_LINK_LIBRARIES ${OPENSSL_LIBRARIES})
-list(APPEND FOLLY_INCLUDE_DIRECTORIES ${OPENSSL_INCLUDE_DIR})
-list(APPEND CMAKE_REQUIRED_LIBRARIES ${OPENSSL_LIBRARIES})
-list(APPEND CMAKE_REQUIRED_INCLUDES ${OPENSSL_INCLUDE_DIR})
+list(APPEND FOLLY_LINK_LIBRARIES ${OpenSSL_LIBRARIES})
+list(APPEND FOLLY_INCLUDE_DIRECTORIES ${OpenSSL_INCLUDE_DIR})
+list(APPEND CMAKE_REQUIRED_LIBRARIES ${OpenSSL_LIBRARIES})
+list(APPEND CMAKE_REQUIRED_INCLUDES ${OpenSSL_INCLUDE_DIR})
 check_function_exists(ASN1_TIME_diff FOLLY_HAVE_OPENSSL_ASN1_TIME_DIFF)
 
 find_package(ZLIB MODULE)
@@ -67,10 +67,10 @@ if (ZLIB_FOUND)
 endif()
 
 find_package(BZip2 MODULE)
-set(FOLLY_HAVE_LIBBZ2 ${BZIP2_FOUND})
-if (BZIP2_FOUND)
-  list(APPEND FOLLY_INCLUDE_DIRECTORIES ${BZIP2_INCLUDE_DIRS})
-  list(APPEND FOLLY_LINK_LIBRARIES ${BZIP2_LIBRARIES})
+set(FOLLY_HAVE_LIBBZ2 ${BZip2_FOUND})
+if (BZip2_FOUND)
+  list(APPEND FOLLY_INCLUDE_DIRECTORIES ${BZip2_INCLUDE_DIRS})
+  list(APPEND FOLLY_LINK_LIBRARIES ${BZip2_LIBRARIES})
 endif()
 
 find_package(LibLZMA MODULE)
@@ -80,18 +80,18 @@ if (LIBLZMA_FOUND)
   list(APPEND FOLLY_LINK_LIBRARIES ${LIBLZMA_LIBRARIES})
 endif()
 
-find_package(LZ4 MODULE)
-set(FOLLY_HAVE_LIBLZ4 ${LZ4_FOUND})
-if (LZ4_FOUND)
-  list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LZ4_INCLUDE_DIR})
-  list(APPEND FOLLY_LINK_LIBRARIES ${LZ4_LIBRARY})
+find_package(lz4 MODULE)
+set(FOLLY_HAVE_LIBLZ4 ${lz4_FOUND})
+if (lz4_FOUND)
+  list(APPEND FOLLY_INCLUDE_DIRECTORIES ${lz4_INCLUDE_DIR})
+  list(APPEND FOLLY_LINK_LIBRARIES ${lz4_LIBRARY})
 endif()
 
-find_package(Zstd MODULE)
-set(FOLLY_HAVE_LIBZSTD ${ZSTD_FOUND})
-if(ZSTD_FOUND)
-  list(APPEND FOLLY_INCLUDE_DIRECTORIES ${ZSTD_INCLUDE_DIR})
-  list(APPEND FOLLY_LINK_LIBRARIES ${ZSTD_LIBRARY})
+find_package(zstd MODULE)
+set(FOLLY_HAVE_LIBZSTD ${zstd_FOUND})
+if(zstd_FOUND)
+  list(APPEND FOLLY_INCLUDE_DIRECTORIES ${zstd_INCLUDE_DIR})
+  list(APPEND FOLLY_LINK_LIBRARIES ${zstd_LIBRARY})
 endif()
 
 find_package(Snappy MODULE)
@@ -101,11 +101,11 @@ if (SNAPPY_FOUND)
   list(APPEND FOLLY_LINK_LIBRARIES ${SNAPPY_LIBRARY})
 endif()
 
-find_package(LibDwarf)
-list(APPEND FOLLY_LINK_LIBRARIES ${LIBDWARF_LIBRARIES})
-list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBDWARF_INCLUDE_DIRS})
+find_package(libdwarf)
+list(APPEND FOLLY_LINK_LIBRARIES ${libdwarf_LIBRARIES})
+list(APPEND FOLLY_INCLUDE_DIRECTORIES ${libdwarf_INCLUDE_DIRS})
 
-find_package(Libiberty)
+find_package(libiberty)
 list(APPEND FOLLY_LINK_LIBRARIES ${LIBIBERTY_LIBRARIES})
 list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBIBERTY_INCLUDE_DIRS})
 
@@ -113,9 +113,9 @@ find_package(LibAIO)
 list(APPEND FOLLY_LINK_LIBRARIES ${LIBAIO_LIBRARIES})
 list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBAIO_INCLUDE_DIRS})
 
-find_package(Libsodium)
-list(APPEND FOLLY_LINK_LIBRARIES ${LIBSODIUM_LIBRARIES})
-list(APPEND FOLLY_INCLUDE_DIRECTORIES ${LIBSODIUM_INCLUDE_DIRS})
+find_package(libsodium)
+list(APPEND FOLLY_LINK_LIBRARIES ${libsodium_LIBRARIES})
+list(APPEND FOLLY_INCLUDE_DIRECTORIES ${libsodium_INCLUDE_DIRS})
 
 list(APPEND FOLLY_LINK_LIBRARIES ${CMAKE_DL_LIBS})
 list(APPEND CMAKE_REQUIRED_LIBRARIES ${CMAKE_DL_LIBS})
@@ -127,13 +127,13 @@ endif ()
 
 set(FOLLY_USE_SYMBOLIZER OFF)
 CHECK_INCLUDE_FILE_CXX(elf.h FOLLY_HAVE_ELF_H)
-find_library(UNWIND_LIBRARIES NAMES unwind)
-if (UNWIND_LIBRARIES)
-  list(APPEND FOLLY_LINK_LIBRARIES ${UNWIND_LIBRARIES})
-  list(APPEND CMAKE_REQUIRED_LIBRARIES ${UNWIND_LIBRARIES})
+find_library(libunwind_LIBRARIES NAMES libunwind)
+if (libunwind_LIBRARIES)
+  list(APPEND FOLLY_LINK_LIBRARIES ${libunwind_LIBRARIES})
+  list(APPEND CMAKE_REQUIRED_LIBRARIES ${libunwind_LIBRARIES})
 endif()
 check_function_exists(backtrace FOLLY_HAVE_BACKTRACE)
-if (FOLLY_HAVE_ELF_H AND FOLLY_HAVE_BACKTRACE AND LIBDWARF_FOUND)
+if (FOLLY_HAVE_ELF_H AND FOLLY_HAVE_BACKTRACE AND libdwarf_FOUND)
   set(FOLLY_USE_SYMBOLIZER ON)
 endif()
 message(STATUS "Setting FOLLY_USE_SYMBOLIZER: ${FOLLY_USE_SYMBOLIZER}")
